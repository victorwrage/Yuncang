package com.zdv.yuncang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zdv.yuncang.ZDVOrderDetailItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZDVORDER_DETAIL_ITEM".
*/
public class ZDVOrderDetailItemDao extends AbstractDao<ZDVOrderDetailItem, Long> {

    public static final String TABLENAME = "ZDVORDER_DETAIL_ITEM";

    /**
     * Properties of entity ZDVOrderDetailItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ocode = new Property(1, String.class, "ocode", false, "OCODE");
        public final static Property Pcode = new Property(2, String.class, "pcode", false, "PCODE");
        public final static Property Barcode = new Property(3, String.class, "barcode", false, "BARCODE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property Act_num = new Property(6, String.class, "act_num", false, "ACT_NUM");
        public final static Property Number = new Property(7, String.class, "number", false, "NUMBER");
        public final static Property Price = new Property(8, String.class, "price", false, "PRICE");
        public final static Property Memprice = new Property(9, String.class, "memprice", false, "MEMPRICE");
        public final static Property Cost_type = new Property(10, String.class, "cost_type", false, "COST_TYPE");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property Item_code = new Property(12, String.class, "item_code", false, "ITEM_CODE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Cwpsl = new Property(14, String.class, "cwpsl", false, "CWPSL");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
    };


    public ZDVOrderDetailItemDao(DaoConfig config) {
        super(config);
    }
    
    public ZDVOrderDetailItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZDVORDER_DETAIL_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OCODE\" TEXT," + // 1: ocode
                "\"PCODE\" TEXT," + // 2: pcode
                "\"BARCODE\" TEXT," + // 3: barcode
                "\"NAME\" TEXT," + // 4: name
                "\"UNIT\" TEXT," + // 5: unit
                "\"ACT_NUM\" TEXT," + // 6: act_num
                "\"NUMBER\" TEXT," + // 7: number
                "\"PRICE\" TEXT," + // 8: price
                "\"MEMPRICE\" TEXT," + // 9: memprice
                "\"COST_TYPE\" TEXT," + // 10: cost_type
                "\"ADDRESS\" TEXT," + // 11: address
                "\"ITEM_CODE\" TEXT," + // 12: item_code
                "\"REMARK\" TEXT," + // 13: remark
                "\"CWPSL\" TEXT," + // 14: cwpsl
                "\"STATUS\" TEXT);"); // 15: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZDVORDER_DETAIL_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZDVOrderDetailItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ocode = entity.getOcode();
        if (ocode != null) {
            stmt.bindString(2, ocode);
        }
 
        String pcode = entity.getPcode();
        if (pcode != null) {
            stmt.bindString(3, pcode);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(4, barcode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String act_num = entity.getAct_num();
        if (act_num != null) {
            stmt.bindString(7, act_num);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(8, number);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String memprice = entity.getMemprice();
        if (memprice != null) {
            stmt.bindString(10, memprice);
        }
 
        String cost_type = entity.getCost_type();
        if (cost_type != null) {
            stmt.bindString(11, cost_type);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String item_code = entity.getItem_code();
        if (item_code != null) {
            stmt.bindString(13, item_code);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String cwpsl = entity.getCwpsl();
        if (cwpsl != null) {
            stmt.bindString(15, cwpsl);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZDVOrderDetailItem readEntity(Cursor cursor, int offset) {
        ZDVOrderDetailItem entity = new ZDVOrderDetailItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ocode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // barcode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // act_num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // memprice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cost_type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // item_code
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cwpsl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZDVOrderDetailItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAct_num(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMemprice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCost_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setItem_code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCwpsl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZDVOrderDetailItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZDVOrderDetailItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
